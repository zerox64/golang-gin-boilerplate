package services

import (
	"context"
	"fmt"
	"go.mongodb.org/mongo-driver/bson"
	"go.mongodb.org/mongo-driver/bson/primitive"
	"go.mongodb.org/mongo-driver/mongo"
	"go.mongodb.org/mongo-driver/mongo/options"
	"golang-gin-boilerplate/pkg/{{SingularLowerName}}/models"
	"log"
)

func All{{TitleName}}() []models.{{TitleName}} {
	cursor, err, ctx := models.{{TitleName}}Collection.Find(bson.M{})

	var {{PluralLowerName}} []models.{{TitleName}}

	if err != nil {
		log.Fatal(err)
	}
	if err = cursor.All(ctx, &{{PluralLowerName}}); err != nil {
		log.Fatal(err)
	}

	defer func(cursor *mongo.Cursor, ctx context.Context) {
		var err = cursor.Close(ctx)
		if err != nil {

		}
	}(cursor, ctx)

	return {{PluralLowerName}}
}

func CreateA{{TitleName}}({{SingularLowerName}} models.{{TitleName}}) models.{{TitleName}} {
	newEnrollment := models.{{TitleName}}{
		Id:     primitive.NewObjectID(),
		Task:   {{SingularLowerName}}.Task,
		Status: {{SingularLowerName}}.Status,
	}

	result, err := models.{{TitleName}}Collection.InsertOne(newEnrollment)
	if err != nil || result == nil {
		panic(err)
	}

	return newEnrollment
}

func UpdateA{{TitleName}}({{SingularLowerName}}Id string, update{{TitleName}} models.{{TitleName}}) (models.{{TitleName}}, error) {

	objId, _ := primitive.ObjectIDFromHex({{SingularLowerName}}Id)

	upsert := true
	after := options.After
	opt := options.FindOneAndUpdateOptions{
		ReturnDocument: &after,
		Upsert:         &upsert,
	}

	result := models.{{TitleName}}Collection.FindOneAndUpdate(bson.M{"_id": objId}, bson.D{
		{"$set", bson.M{"task": update{{TitleName}}.Task, "status": update{{TitleName}}.Status}},
	}, &opt)

	if result.Err() != nil {
		log.Println("Err ", result.Err())
		return models.{{TitleName}}{}, result.Err()
	}

	if err := result.Decode(&update{{TitleName}}); err != nil {
		return models.{{TitleName}}{}, err
	}

	return update{{TitleName}}, nil
}

func A{{TitleName}}({{SingularLowerName}}Id string) models.{{TitleName}} {
	var {{SingularLowerName}} models.{{TitleName}}

	objId, _ := primitive.ObjectIDFromHex({{SingularLowerName}}Id)

	err := models.{{TitleName}}Collection.FindOne(bson.M{"_id": objId}).Decode(&{{SingularLowerName}})

	if err != nil {
		fmt.Println(err)
		panic(err)
	}

	return {{SingularLowerName}}
}

func DeleteA{{TitleName}}({{SingularLowerName}}Id string) (error, bool) {
	var {{SingularLowerName}} models.{{TitleName}}

	objId, _ := primitive.ObjectIDFromHex({{SingularLowerName}}Id)

	result := models.{{TitleName}}Collection.FindOneAndDelete(bson.D{{"_id", objId}})

	if result.Err() != nil {
		return result.Err(), false
	}

	return result.Decode(&{{SingularLowerName}}), true

}
